#!/usr/bin/env python
#
# Kubernetes node monitoring script for the Raspberry Pi Dramble.
import serial
import re
import urllib2
import time
import sys, signal

# Turn-on per second
PERIODICIY = 0.05

# Class to handle SIGINT/SIGTERM gracefully.
class GracefulKiller:
    kill_now = False
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def exit_gracefully(self,signum, frame):
        self.kill_now = True

# Define what to do when script is stopped externally.
def signal_handler(signal, frame):
    print "\nStopping node monitor."
    ser.close()
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)

# Function to check if Kubernetes node is ready or not.
def check_node_status():
    status = False;

    try:
        contents = urllib2.urlopen(url="http://localhost:10248/healthz", timeout=1).read()
        if contents == 'ok':
            status = True
        else:
            status = False

    except urllib2.URLError:
        status = False

    return status

def get_color():
    ser.reset_input_buffer()
    ser.write("G\n")
    time.sleep(1)
    while (ser.in_waiting > 0):
        response = ser.readline()
        match = re.search('\(([0-9a-f]+),([0-9a-f]+),([0-9a-f]+)\)', response)
        if match is None:
            continue;
        else:
            return [int(match.group(1), 16), int(match.group(2), 16), int(match.group(3), 16)]

def set_color(red=0, green=0, blue=0):
    ser.write('#{:02x}{:02x}{:02x}\n'.format(red, green, blue))
    time.sleep(1)
    while (ser.in_waiting > 0):
        response = ser.readline()

# Function to update fit-statUSB light to reflect current node status.
def update_status_led(ser):
    current_color = get_color()
    if check_node_status():
        if current_color != [0, 128, 0]:
            set_color(red=0, green=128, blue=0)
            print 'LED changed to reflect Ready status.'
    else:
        if current_color != [128, 0, 0]:
            set_color(red=128, green=0, blue=0)
            print 'LED changed to reflect NotReady status.'
    time.sleep(5)

# Main.
ser = serial.Serial("/dev/ttyACM0")
time.sleep(PERIODICIY)
killer = GracefulKiller()
while True:
    try:
        update_status_led(ser)
        if killer.kill_now:
            break
    except Exception, e:
        ser.close()

        print >> sys.stderr, "Exiting for exception."
        print >> sys.stderr, "Exception: %s" % str(e)
        sys.exit(1)
ser.close()
print "Exiting gracefully."
